# 웹(클라이언트)이 깔려 있으면 앱을 이용할 수 있음.(네이버, 멜론, 인스타 등등)
# 웹디자인 - 도안을 그린다고 보면, 웹퍼블리싱 - 그 도안대로 구현하는 역할.
# 웹디자인까지는 못 배워도 웹퍼블리싱은 꽤 배울 것.
# 프론트엔드 엔지니어링 - 서버와 통신
# 퍼블리셔들이 웹 개발자라고 하지 않지만, 프론트엔드 엔지니어링을 하면 웹개발자임.
# 장사를 시작해서 손님들한테 주문 받는게 프론트엔드 엔지니어링

# 백엔드 - 클라이언트에게 데이터를 주고받고 함. (실제 두뇌, 실제 주방) 숨겨져있는,
# 어떤 동작으로 로그인이 되는지, 어떻게 자동로그인이 이루어지는지 과정은 모르나 되는 것, 그것이 백엔드

# HTML 건물의 골조를 짠다고 보면 됨.
# CSS로 도배하는 등
# JavaScript 건물에서 살 수 있게 필요한 전기, 가스, 통신 등을 돌아가게 해주는 것.

# node JS 같은건 보통 스타트업에서 가볍게 시작할 때 사용.
# 규모가 커지면 보통 Java의 Spring을 씀. 최고라서라기보다 조금 안정화되었다고 검증된 편이기 때문.
# 표준(기준점)이 spring이 되어버렸다고 보면 됨.(산업구조가 ㅇㅇ)

### 발표자료 1.0, 1.1, final, 찐찐 파이널, 찐찐찐 파이널 등등등의 버전
# GIT, GIT HUBE로는 버전관리를 하는거라고 보면 됨.
# 이전 버전의 반응이 더 좋아서 되돌아야 하는 경우가 생길 수도 있기 때문에 이전 버전은 항상 남겨두는 것이 좋음.

# 개발사 - 자사의 플랫폼(솔루션)이 있는 회사. ex) 이스트소프트, 한컴 등.
# 스타트업의 먹이감 = 개발 2-3년차의 공부는 열심히하고 경험은 좀 부족하지만 실력은 괜찮은 사람들.
# 스타트업에서 2년을 더 해서 몸값을 올린 경우, 8천까지 몸값을 올린 경우, 
# 이직 안하면 바보다..

# 개발자 -> 지적 호기심, 왜??를 많이 외치는 사람.

# 홍순구 강사 - hsg9984@gmail.com / HP : 010-7270-9984

# gui가 없으므로 명령어로 이동해야함
# cd를 입력해서 하는 것은 내가 이동하려고 시도하는 것임
# 뒤로가기는 cd .. / 맨 처음 부분 이동하기 전 디폴트 상태의 폴더를 rot라고 함. cd ~로 감.
# 뒤로가기는 cd../.. 이렇게 입력하면 2번 뒤로가기를 한번에 명령할 수 있음. (3번 뒤로가기 하려면 cd ../../..)
# 띄어쓰기가 있으면 " "안에 폴더명을 넣어줘야함. 그래야 tqb키가 작동.

# 교안에서의 디렉토리 변경은 내가 gui가 없어서 그렇지 폴더를 더블클릭해서 이동하는 것과 같다.
# pwd는 현재 내가 있는 위치, gui가 없기 때문에 헷갈릴 수 있음.
# mkdir : 메이크 디렉토리 <-- 이 명령어로 폴더를 만들 수 있음.
# mk를 치다가 뒤에 dir이 기억이 안나면 tab키를 눌러서 자동완성시킬 수 있으며
# 혹시나 겹치는 이름이 있다면 tab키를 두번 눌러서 목록에서 선택이 가능.
# ls는 현재 내가 들어와있는 폴더에 어떤 것들이 있는지 쫙 보이게(리스트업) 하는 것.

# git bash는 리눅스 명령어를 사용하고 있는 것임.
# 아예 드라이브를 옮기고 싶으면 cd e:
# cd ../a로 하면 뒤로가기 이후 a 폴더로 한번에 이동.
# 해당 폴더 진입후 또 하위폴더로 여러 개의 폴더를 한번에 만들고 싶다면
# mkdir a b c <- 이렇게 입력하면 a, b, c 세 개의 폴더가 한번에 만들어짐.
# 지울 때는 rmdir a b c
# 폴더를 만들 때는 mkdir이지만, 파일을 만들때는 touch라는 명령어를 사용.
# ex) a라는 메모장을 만들 경우, touch a.txt

### 버전관리 순서 ###
# 초기화(initialize) 시작하는 것. 버전관리를 시작하겠다. 맨 처음에만 하고 이후에는 안하는 것.
# 버전 생성 2.1.~~ , 2.2.~~ 이런 식.  add -> commit
# add는 내가 어떠한 폴더와 파일을 버전에 포함시킬 것인지를 결정하는 것
# commit은 add에서 결정한 것을 확정짓는 것.

#git_study라는 폴더(나중에는 앱)를 버전관리하려고 할 때,
#일단 해당 폴더에 진입해야함.
#깃 초기화부터!
#git init 이라고 명령어를 입력하면 이제부터 이 경로를 버전관리하겠다는 뜻!
#폴더에 숨김파일이 생기고 그곳에 버전 이력이 남겨짐.
#그 폴더가 사라지면 버전 이력이 다 날아감.
#git status : 깃 상태보기.
#a.txt를 만들어놓고 add를 하지 않으면 working tree에 저장.
#add만 하고 커밋을 하지 않으면 staging area에 저장.
#그래서 add 된걸 unstage한다는 말이 안내문에 나옴.

# 커밋 명령어 : git commit -m(메시지의 줄임말, 버전 상태에 대한 "퍼스트 커밋"이라고 옵션을 붙이는 것.) "first commit"
# git log 명령어 : 버전이 생성된 이력 보는 것.
# 한번에 add할 때, git add a.txt b.txt라고 입력하면 됨.
# 그러면 a에서 쓴 문자 줄 수 + b에서 쓴 문자 줄 수가 합산되어 표시됨.
# head -> master 부분은 최신 버전, 지금 화살표가 가리키는 부분이라는 뜻.
# git log --oneline 이라고 입력하면 한줄로 기록을 보여라 라는 뜻.
# a.txt를 폴더에서 지웠으면 지운거조차도 add로 반영해야함.

## 이전 버전으로의 복귀를 꾀할 때 ##
# git checkout 돌아가고자 하는 커밋의 식별번호를 입력.
# git checkout master로 하면 돌아갔던 2번째 폴더에서 다시 최신 파일로의 복귀가 가능.
# 변경사항이 생기고 내 나름대로 적용을 하고 버전 반영한거 같은데 잘 안되면 일단 git status 활용.
# add 해야할 파일(기존에 버전업된거에서 더 추가된 것들)이 너무 많을 때, 명령어 git add . (모든 파일을 다 등록하는 것.)
# git commit -m "4th commit - c,d,e.txt made"
## 지금까지는 개인적으로 하드디스크에 저장한 것임. 이를 로컬저장소에 저장했다고 함.
## 단점 : 컴퓨터가 불타서, 모종의 오류로 포맷을 하게 될 경우 지금까지의 것들이 날아가버림.
## 따라서 원격저장소가 필요함. 몇 개의 사이트가 있으나 대표적으로 github를 사용. 클라우드 개념.
## 깃 허브에서 프라이빗으로 원격 저장소를 만들면 3명으로 제한됨. 팀원이 3명을 초과하면 돈을 지불해야함.
# remote = 원격. git remote add가 원격 저장소에 맨 처음 한번 연동을 위해 필요한 명령어.
# 다른 곳에서 복사한 것을 붙여넣을 때는 단축키로 ctrl+v가 아니라 cli 창에서 우클릭으로 paste를 클릭해서 붙여넣어야함.

# 당연히 인터넷에 연결되어 있어야 하며,
# git push origin master 명령어를 입력하여 깃 허브에 업로드함. 최초 한번에 한하여 깃허브 로그인을 요구함.
# 로그인까지 완료한 후 어쏠라이즈를 누르면 연동이 성공했다고 뜨며, cli에 100% 등등의 표시로 서버에 업로드가 완료됨.
# git remote -V로 잘 연동됐는지 확인 가능.??? 확인하는게 맞는건지 잘 모르겠

### 과제** 버전관리 ###
# 0. 사용자 정보 등록 (한 컴퓨터 당 최초 한 번만 실시하면 됨.)
#  - git config --global user.email "mail"
#  - git config --global user.name "name"
# 1. 로컬저장소(내 컴퓨터) 프로젝트 폴더 생성.
# 2. 해당 폴더로 진입해서 (cd 명령어) 깃 초기화(버전관리 시작)
#     git init(버전관리를 하려는 프로그램, 폴더 당 최초 한 번)
# 3. 버전관리할 파일을 추가한다. git add 파일명 or git add .   '.'은 현재 연동중인 해당 폴더 or 프로그램에서 변동된 것들을 모두 다 add 하겠다는 것이 됨. 하나하나 파일명을 다 적을 수 없기 때문.
# 4. 버전을 생성한다. (commit) git commit -m "커밋 메시지(부연 설명)"
# 5. 원격 저장소 생성 (깃허브 저장소, !!!! 이것 또한 깃 초기화를 해서 원격 관리를 하고자 하는 프로그램, 폴더 당 최초 한 번)
#   - 깃허브 사이트 로그인 한 후 오른쪽 상단 위에 + 버튼 누르고 New Repository 선택
# 6. 로컬 저장소와 원격 저장소 연동
#   - git remote add origin (http://~~~) >> 원격 저장소의 주소 remote add는 원격저장소에 연동할 때 한번만 수행!!!
# 7. 로컬 버전관리작업내용 원격에 업로드
#   - git push origin master
# 질문!!! 그렇다면 cli에서 매번 수정이 생길 때마다 commit 이후에 계속 git push origin(그냥 origin이라고 몀명한 것) master라고 해야하나??
## 답 : 커밋이 발생할 때마다 업로드하는게 맞는 듯. 그냥 커밋만 했을 때는 깃허브에 반영되지 않았음. 그럼 혼자 작업 열심히 하다가 여러 개의 추가 커밋이 발생했을 때, 나중에 한번에 업로드하는 형식이 될 듯.
## 답2: git log --oneline을 입력했을 때 origin master라고 뜨는 부분까지가 원격저장소에 반영됐다는 것을 알려주는 것.
### 해결됨 : 아래 주의 부분.
# ===============================================================================================

### 주의 : 로컬 저장소 내부에서는 커밋을 취소 가능하나, 원격에서는 푸시 이후에는 커밋 취소가 불가능.
###   -> 가능하긴 하나 커밋취소를 했다는 흔적이 남아버림. 따라서 푸시는 회사에서는 짬이 안되면 권한이 없음. 회의에서 확정이 나야지만 푸시를 함.
###   -> 푸시 요청서를 작성하기까지 함.

#### 팁!!! #####
# 한번 커밋을 진행했던 파일은 git commit -am " " 해서 add없이 바로 커밋을 진행해도 됨.

# E드라이브 개인폴더에 image_practice라는 프로젝트 폴더 생성 후 인터넷에서 아무 사진이나 다운받고 버전으로 등록한 후, 원격 저장소를 생성하여 버전 정보 업로딩하기.

## 원격저장소 만들었던 것을 삭제하는 법 ##
# danger zone - delete this repository를 클릭
# 정말 지우겠냐고 물어보고 내가 그러겠다고 입력하는 칸에 입력하면 끝.

# 학원 - v6 -> 
# 원격 - v6 -> v7
#  집 - v7 복제한 후 커밋을 집에서 한번 더 했기 때문.
# 집에서 한 v7을 다시 학원에서 하고 싶다면!!! 
# 집에서 한 버전을 우선 원격에 푸시
# 그럼 집 v7, 원격 v7, 학원 v6이 됨.
# 이미 연동된 원격에서 최신버전까지를 다 가져오려고 할 때는 push(업로드)의 반대인 pull(다운로드)을 입력하여 최신화함.


# 클론(clone) - 복제 : 원격저장소를 복제해서 !!!!아무것도 작업된게 없던!!! 로컬저장소에 그대로 떠오는 것.
# 새로운 공간에서 시작할 때 맨 처음 해야할 과정이 클론 만들기. 그래야 이어서 작업이 가능하니까!
# 그래서 git init으로 버전관리를 시작하는게 아니라, 이미 원격저장소에 버전관리 되고 있는 중인 것들을 가져와야함.
## code부분의 주소를 복사해서 git clone + (시프트 + 인설트 키)로 복사한 주소 붙여넣기


## 중간에 집,학원,원격에서 푸시, 풀을 잘못 실수 했으면 나중에 충돌하는 경우가 생김.
## 그래서 푸시, 풀을 함부로 하면 안됨.
## 습관적으로 작업 처음시, 원격에서부터 pull을 당겨서 혹시 안가져온 것이 있는지 확인.
## 내가 잘 했다면 가져올게 없다라고 뜰 것.
## 작업해놓고 푸시하는 것도 잊지 말아야함.
## 실수해서 오류가 뜨면 동기화 업로드 업데이트가 거절되었다고 뜨고, 그거 먼저 하라고 함.
## push 하기 전에 pull부터 하라고 시킴. 그럼 v7이었던 상태로 롤백을 해야하는데 v8을 생략했던 v9을 따로 백업하고
## 다시 v8을 pull을해서 가져온 후, 다시 v9을 넣어야함.
## 만약 문제없이 동기화가 된 상태였으면 pull을 했을 때 already up to date.라고 이미 다 해서 가져올게 없다고 뜸.

### 다른 로컬 저장소에서 프로젝트 버전 관리하기 ###
# 1. 원격 저장소(깃허브)의 프로젝트를 복제한다.
#   - git clone http://ss~~저장소 URL
# 2. 2번째 로컬저장소에서 커밋을 통해 새로운 버전을 생성한다.
# 3. 새로운 버전을 원격저장소로 푸시한다.
# 4. 1번째 로컬저장소에서 풀을 통해 2번째 저장소의 작업물을 업데이트한다.
#   - git pull origin master

### 협업을 할 때는 푸시를 함부로 하지 않고, 했을 경우에는 팀원 모두에게 알려서 버전을 맞춘다.

### github에서 내 닉네임과 똑같은 new repository를 만들면 히든이 나옴.
## 퍼블릭, add read me 파일 만들기도 체크해서 만들면 프로필 메세지 만들기 가능.


### 잡기술 : md파일(마크다운) 작성법 검색하면 뭐가 많음 ###
### https://stackoverflow.com/ 여기서 막힐 때 상당한 도움을 받을 수 있다고 함.. 다 영어라 잘 활용할 수 있을지..
